#define _PARSE_KEY state parse_extract_key_8 {   buffer.extract(hdr.key_8);   user_metadata.key = (bit<384>)(((bit<368>)user_metadata.key) ++ hdr.key_8.key);   transition parse_key_null; }  state parse_key_8 {   transition select(hdr.memcached.key_length[0:0]) {     1 : parse_extract_key_8;     _ : parse_key_null;   } } state parse_extract_key_16 {   buffer.extract(hdr.key_16);   user_metadata.key = (bit<384>)(((bit<352>)user_metadata.key) ++ hdr.key_16.key);   transition parse_key_8; }  state parse_key_16 {   transition select(hdr.memcached.key_length[1:1]) {     1 : parse_extract_key_16;     _ : parse_key_8;   } } state parse_extract_key_32 {   buffer.extract(hdr.key_32);   user_metadata.key = (bit<384>)(((bit<320>)user_metadata.key) ++ hdr.key_32.key);   transition parse_key_16; }  state parse_key_32 {   transition select(hdr.memcached.key_length[2:2]) {     1 : parse_extract_key_32;     _ : parse_key_16;   } } state parse_extract_key_64 {   buffer.extract(hdr.key_64);   user_metadata.key = (bit<384>)(((bit<256>)user_metadata.key) ++ hdr.key_64.key);   transition parse_key_32; }  state parse_key_64 {   transition select(hdr.memcached.key_length[3:3]) {     1 : parse_extract_key_64;     _ : parse_key_32;   } } state parse_extract_key_128 {   buffer.extract(hdr.key_128);   user_metadata.key = (bit<384>)(((bit<256>)user_metadata.key) ++ hdr.key_128.key);   transition parse_key_64; }  state parse_key_128 {   transition select(hdr.memcached.key_length[4:4]) {     1 : parse_extract_key_128;     _ : parse_key_64;   } } state parse_extract_key_256 {   buffer.extract(hdr.key_256);   user_metadata.key = (bit<384>)(hdr.key_256.key);   transition parse_key_128; }  state parse_key_256 {   transition select(hdr.memcached.key_length[5:5]) {     1 : parse_extract_key_256;     _ : parse_key_128;   } } 

#define _PARSE_VALUE state parse_extract_value_8 {   buffer.extract(hdr.value_8);   user_metadata.value = (bit<2048>)(((bit<2032>)user_metadata.value) ++ hdr.value_8.value);   transition parse_value_null; }  state parse_value_8 {   transition select(user_metadata.value_size[0:0]) {     1 : parse_extract_value_8;     _ : parse_value_null;   } } state parse_extract_value_16 {   buffer.extract(hdr.value_16);   user_metadata.value = (bit<2048>)(((bit<2016>)user_metadata.value) ++ hdr.value_16.value);   transition parse_value_8; }  state parse_value_16 {   transition select(user_metadata.value_size[1:1]) {     1 : parse_extract_value_16;     _ : parse_value_8;   } } state parse_extract_value_32 {   buffer.extract(hdr.value_32);   user_metadata.value = (bit<2048>)(((bit<1984>)user_metadata.value) ++ hdr.value_32.value);   transition parse_value_16; }  state parse_value_32 {   transition select(user_metadata.value_size[2:2]) {     1 : parse_extract_value_32;     _ : parse_value_16;   } } state parse_extract_value_64 {   buffer.extract(hdr.value_64);   user_metadata.value = (bit<2048>)(((bit<1920>)user_metadata.value) ++ hdr.value_64.value);   transition parse_value_32; }  state parse_value_64 {   transition select(user_metadata.value_size[3:3]) {     1 : parse_extract_value_64;     _ : parse_value_32;   } } state parse_extract_value_128 {   buffer.extract(hdr.value_128);   user_metadata.value = (bit<2048>)(((bit<1792>)user_metadata.value) ++ hdr.value_128.value);   transition parse_value_64; }  state parse_value_128 {   transition select(user_metadata.value_size[4:4]) {     1 : parse_extract_value_128;     _ : parse_value_64;   } } state parse_extract_value_256 {   buffer.extract(hdr.value_256);   user_metadata.value = (bit<2048>)(((bit<1536>)user_metadata.value) ++ hdr.value_256.value);   transition parse_value_128; }  state parse_value_256 {   transition select(user_metadata.value_size[5:5]) {     1 : parse_extract_value_256;     _ : parse_value_128;   } } state parse_extract_value_512 {   buffer.extract(hdr.value_512);   user_metadata.value = (bit<2048>)(((bit<1024>)user_metadata.value) ++ hdr.value_512.value);   transition parse_value_256; }  state parse_value_512 {   transition select(user_metadata.value_size[6:6]) {     1 : parse_extract_value_512;     _ : parse_value_256;   } } state parse_extract_value_1024 {   buffer.extract(hdr.value_1024);   user_metadata.value = (bit<2048>)(hdr.value_1024.value);   transition parse_value_512; }  state parse_value_1024 {   transition select(user_metadata.value_size[7:7]) {     1 : parse_extract_value_1024;     _ : parse_value_512;   } } state parse_extract_value_2048 {   buffer.extract(hdr.value_2048);   user_metadata.value = (bit<2048>)(hdr.value_2048.value);   transition parse_value_1024; }  state parse_value_2048 {   transition select(user_metadata.value_size[8:8]) {     1 : parse_extract_value_2048;     _ : parse_value_1024;   } } 

